/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "openamp.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "openamp_conf.h"
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GRAPH_POINTS 11

#ifndef HSEM_ID_0
#define HSEM_ID_0 (0U) /* HW semaphore 0*/
#endif

typedef struct __attribute__((packed)) {
    float volt_input;
    float volt_sys;
    float volt_3;
    float volt_5;
    float volt_12v;
    float volt_15v;
} AdcPacket_t;

typedef struct __attribute__((packed)) {
    AdcPacket_t adc_values;
    uint32_t checksum;
} ScreenPacket_t;


#define NUM_BUFFERS 2
volatile ScreenPacket_t buffers[NUM_BUFFERS];
volatile uint8_t buffer_ready[NUM_BUFFERS] = {0};
volatile uint8_t buffer_lock[NUM_BUFFERS] = {0};
volatile uint8_t current_write = 0;
volatile uint8_t current_read = 1;


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart8;

/* USER CODE BEGIN PV */
//static volatile int message_received;
volatile char *received_data_str;
static struct rpmsg_endpoint rp_endpoint;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
unsigned int receive_message(void);
static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv);
void print_buffer_if_ready(void);
uint32_t crc32(const void *data, size_t length);  // ✅ CRC fonksiyonu prototipi



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
  //HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
  //kodum
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)  // Debugger bağlı DEĞİLSE
  {
      // Normal çalışıyorsa STOP moduna gir
      HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
  }
  else
  {
      // Debugger bağlıysa sadece WFI (bekle ama durmadan devam et)
      __WFI();
  }

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /*Clear Flags generated during the wakeup notification */
  HSEM_COMMON->ICR |= ((uint32_t)__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
  HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_UART8_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_UART_Transmit(&huart8, (uint8_t *)"CM4 started\r\n",strlen("CM4 started\r\n"),HAL_MAX_DELAY);

   /* Initialize the mailbox use notify the other core on new message */
   MAILBOX_Init();

   MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
   OPENAMP_create_endpoint(&rp_endpoint, "openamp_demo", RPMSG_ADDR_ANY, rpmsg_recv_callback, NULL);


// OPENAMP_DeInit();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    OPENAMP_check_for_message();


  }
  /* USER CODE END 3 */
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 19999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 199;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{

  /* USER CODE BEGIN UART8_Init 0 */

  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
  huart8.Init.BaudRate = 115200;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOJ_CLK_ENABLE();

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv)
{
    if (len != sizeof(ScreenPacket_t))
        return -1;

    ScreenPacket_t *received = (ScreenPacket_t *)data;
    uint8_t i = current_write;

    if (!buffer_lock[i]) {
        buffer_lock[i] = 1;

        uint32_t calculated_crc = crc32(received, sizeof(ScreenPacket_t) - sizeof(uint32_t));

        if (received->checksum == calculated_crc) {
            memcpy((void *)&buffers[i], received, sizeof(ScreenPacket_t));
            buffer_ready[i] = 1;

            const char *ok = "CRC OK\r\n";
            HAL_UART_Transmit(&huart8, (uint8_t *)ok, strlen(ok), HAL_MAX_DELAY);
        } else {
            char debug_msg[96];
            sprintf(debug_msg, "CRC ERROR: calc=0x%08lX, recv=0x%08lX\r\n", calculated_crc, received->checksum);
            HAL_UART_Transmit(&huart8, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
        }

        buffer_lock[i] = 0;
        current_write = (current_write + 1) % NUM_BUFFERS;
    }

    return 0;
}

void print_buffer_if_ready(void)
{
	char dbg[64];
    sprintf(dbg, ">> Buffer status: R=%d W=%d ready[R]=%d\r\n", current_read, current_write, buffer_ready[current_read]);
    HAL_UART_Transmit(&huart8, (uint8_t *)dbg, strlen(dbg), HAL_MAX_DELAY);

    if (buffer_ready[current_read] && !buffer_lock[current_read]) {
        buffer_lock[current_read] = 1;

        char msg[256];
        uint32_t tick = HAL_GetTick();
        sprintf(msg, "[%lu ms] Paket alindi\r\n", tick);
        HAL_UART_Transmit(&huart8, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

        sprintf(msg,
                "V_IN: %.2f V\r\nV_SYS: %.2f V\r\n3V: %.2f V\r\n5V: %.2f V\r\n12V: %.2f V\r\n15V: %.2f V\r\n",
                buffers[current_read].adc_values.volt_input,
                buffers[current_read].adc_values.volt_sys,
                buffers[current_read].adc_values.volt_3,
                buffers[current_read].adc_values.volt_5,
                buffers[current_read].adc_values.volt_12v,
                buffers[current_read].adc_values.volt_15v);
        HAL_UART_Transmit(&huart8, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

        buffer_ready[current_read] = 0;
        buffer_lock[current_read] = 0;
        current_read = (current_read + 1) % NUM_BUFFERS;
    }
}

uint32_t crc32(const void *data, size_t length)
{
    uint32_t crc = 0xFFFFFFFF;
    const uint8_t *bytes = (const uint8_t *)data;

    for (size_t i = 0; i < length; ++i) {
        crc ^= bytes[i];
        for (int j = 0; j < 8; ++j)
            crc = (crc >> 1) ^ (0xEDB88320U & -(crc & 1));
    }

    return crc ^ 0xFFFFFFFF;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM2)
    {
        print_buffer_if_ready();
    }
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
